{"version":3,"sources":["useClickOutside.js","ColorPicker.tsx","Hexie.tsx","Row.tsx","Grid.tsx","App.tsx","index.js"],"names":["useClickOutside","ref","handler","useEffect","startedInside","startedWhenMounted","listener","event","current","contains","target","validateEventStart","document","addEventListener","removeEventListener","ColorPicker","color","onChange","type","popover","useRef","useState","isOpen","toggle","close","useCallback","className","style","backgroundColor","onClick","Hexie","hexColor","setHexColor","Row","count","colors","row","hexies","i","push","Math","floor","random","length","Grid","dimensions","rows","perRow","App","setRows","setPerRow","setColors","grid","value","e","Number","map","index","newColor","updatedColors","console","log","rootElement","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.b0809a4e.chunk.js","sourcesContent":["import { useEffect } from \"react\";\n\n// Improved version of https://usehooks.com/useOnClickOutside/\nconst useClickOutside = (ref, handler) => {\n  useEffect(() => {\n    let startedInside = false;\n    let startedWhenMounted = false;\n\n    const listener = (event) => {\n      // Do nothing if `mousedown` or `touchstart` started inside ref element\n      if (startedInside || !startedWhenMounted) return;\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) return;\n\n      handler(event);\n    };\n\n    const validateEventStart = (event) => {\n      startedWhenMounted = ref.current;\n      startedInside = ref.current && ref.current.contains(event.target);\n    };\n\n    document.addEventListener(\"mousedown\", validateEventStart);\n    document.addEventListener(\"touchstart\", validateEventStart);\n    document.addEventListener(\"click\", listener);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", validateEventStart);\n      document.removeEventListener(\"touchstart\", validateEventStart);\n      document.removeEventListener(\"click\", listener);\n    };\n  }, [ref, handler]);\n};\n\nexport default useClickOutside;\n","import React, { useCallback, useRef, useState } from \"react\";\nimport { HexColorPicker, HexColorInput } from \"react-colorful\";\nimport useClickOutside from \"./useClickOutside\";\n\ninterface ColorPickerProps {\n  color: string,\n  onChange: (color: string)=> void,\n  type: string,\n}\n\nexport default function ColorPicker({ color, onChange, type }: ColorPickerProps): JSX.Element {\n  const popover = useRef<HTMLDivElement>(null);\n  const [isOpen, toggle] = useState(false);\n\n  const close = useCallback(() => toggle(false), []);\n  useClickOutside(popover, close);\n\n  return (\n    <div className=\"picker\">\n      <div\n        className={type}\n        style={{ backgroundColor: color }}\n        onClick={() => toggle(true)}\n      />\n\n      {isOpen && (\n        <div className=\"popover\" ref={popover}>\n          <HexColorPicker color={color} onChange={onChange} />\n          <HexColorInput color={color} onChange={onChange} />\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport ColorPicker from \"./ColorPicker\";\n\nexport default function Hexie({ color }: {color: string}): JSX.Element {\n  const [hexColor, setHexColor] = useState(color);\n\n  useEffect(() => {\n    setHexColor(color);\n  }, [color]);\n\n  return <ColorPicker color={hexColor} onChange={setHexColor} type=\"hexie\" />;\n}\n","import { useEffect } from \"react\";\nimport Hexie from \"./Hexie\";\n\ninterface RowProps {\n  count: number;\n  row: number;\n  colors: Array<string>;\n}\n\nexport default function Row({ count, colors, row }: RowProps): JSX.Element {\n  const hexies: Array<JSX.Element> = [];\n\n  const getColor = (): string => {\n    return colors[Math.floor(Math.random() * colors.length)];\n  };\n\n  for (let i = 0; i < count - (row % 2); i++) {\n    hexies.push(<Hexie key={`hexie${row}${i}`} color={getColor()} />);\n  }\n\n  return <div className=\"row\">{hexies}</div>;\n}\n","import Row from \"./Row\";\n\ninterface GridProps {\n  dimensions: Record<string, number>,\n  colors: Array<string>,\n}\n\nexport default function Grid({ dimensions, colors }: GridProps): JSX.Element {\n  const rows: Array<JSX.Element> = [];\n\n  for (let i = 0; i < dimensions.rows; i++) {\n    rows.push(\n      <Row count={dimensions.perRow} colors={colors} row={i} key={`row${i}`} />\n    );\n  }\n\n  return <div className=\"grid\">{rows}</div>;\n}\n","import \"./styles.css\";\n\nimport { useState } from \"react\";\nimport ColorPicker from \"./ColorPicker\";\nimport Grid from \"./Grid\";\n\nexport default function App() {\n  const defaultSize = 25;\n  const defaultColors = [\"#e74645\", \"#fb7756\", \"#facd60\", \"#fdfa66\", \"#1ac0c6\"];\n\n  const [rows, setRows] = useState(defaultSize);\n  const [perRow, setPerRow] = useState(defaultSize);\n  const [colors, setColors] = useState(defaultColors);\n  const grid = { rows, perRow };\n\n  const changeColor = (index: number): ((color: string) => void) => {\n    return (newColor: string) => {\n      const updatedColors = [...colors];\n      updatedColors[index] = newColor;\n      console.log(colors);\n      setColors(updatedColors);\n    };\n  };\n\n  const addColor = (): void => {\n    const updatedColors = [...colors];\n    updatedColors.push(\"#fff\");\n    setColors(updatedColors);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"options\">\n        <label>\n          Rows:{\" \"}\n          <input\n            value={rows}\n            onChange={(e) => setRows(Number(e.target.value))}\n          />\n        </label>\n        <label>\n          {\" \"}\n          Hexies Per Row:{\" \"}\n          <input\n            value={perRow}\n            onChange={(e) => setPerRow(Number(e.target.value))}\n          />{\" \"}\n        </label>\n        <div className=\"colors\">\n          Colors:\n          {colors.map((color, i) => {\n            return (\n              <ColorPicker\n                color={color}\n                onChange={changeColor(i)}\n                type=\"swatch\"\n                key={`swatch${i}`}\n              />\n            );\n          })}\n          <button onClick={addColor}>+</button>\n        </div>\n      </div>\n      <Grid dimensions={grid} colors={colors} />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}